geom_boxplot()+
labs(y="Fold Change (2^ddCt)",title="Gen 1")+
geom_jitter(color="#A52A2A")
library(readxl)
Delta_delta_method_template <- read_excel("~/Dropbox/VINCULACION CON EL MEDIO/AEA/2022/Curso_Expresion_Genes/GeneExpression_2022/Clase_09/Delta-delta-method-template.xlsx")
View(Delta_delta_method_template)
# Importa base de datos de CT en formato MESSY
messy <- read_excel("Delta-delta-method-template.xlsx")
setwd("~/Dropbox/VINCULACION CON EL MEDIO/AEA/2022/Curso_Expresion_Genes/GeneExpression_2022/Clase_09")
# Importa base de datos de CT en formato MESSY
messy <- read_excel("Delta-delta-method-template.xlsx")
View(messy)
summary(messy)
head(messy)  # Muestra los primeros datos del data set
# Colapsar columnas de CT
messy %>% gather("Gen",3:6)
library(tidyr) # Paquete para manipular datos
# Colapsar columnas de CT
messy %>% gather("Gen",3:6)
# Colapsar columna Tratamiento
messy %>% gather("Tratamiento","Gen",3:6)
# Colapsar columna Tratamiento
messy %>% gather("Gen","Ct",3:6)
tidy <- messy %>% gather("Gen","Ct",3:6)
View(tidy)
# Las variables de clasificación se deben transformar a factores.
tidy$Tratamiento <- as.factor(tidy$Tratamiento)
tidy$Sample <- as.factor(tidy$Sample)
summary(tidy)
# Crear histograma con ggplot2
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia")
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia") +
My_Theme
# Modificamos tamaño de etiquetas
My_Theme = theme(
plot.title = element_text(size = 18),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia") +
My_Theme
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma de CT", x="Ct",
y="Frecuencia") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Tratamiento, y= Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Boxplot de ct", x="Tratameinto", y="Ct") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Tratamiento, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Tratameinto", y="Ct") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Tratameinto", y="Ct") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="TGen", y="Ct") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="TGen", y="Ct") +
facet_wrap(~ Tratamiento)+
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Tratamiento, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Tratamiento", y="Ct") +
facet_wrap(~ Gen)+
My_Theme
# habilitar paquetes ggplot2
library(readxl) # Paquete para importar datos desde excel
library(tidyr) # Paquete para manipular datos
library(dplyr) # Paquete para manipular datos
library(ggplot2) # Paquete para hacer lindos gráficos en R
# Importa base de datos de CT en formato MESSY
messy <- read_excel("Delta-delta-method-template.xlsx")
head(messy)  # Muestra los primeros datos del data set
summary(messy)
# Colapsar columnas con Ct
messy %>% gather("Gen","Ct",3:6)
tidy <- messy %>% gather("Gen","Ct",3:6)
# Las variables de clasificación se deben transformar a factores.
tidy$Tratamiento <- as.factor(tidy$Tratamiento)
tidy$Sample <- as.factor(tidy$Sample)
summary(tidy)
tidy$Gen <- as.factor(tidy$Gen)
summary(tidy)
# Crear histograma con ggplot2
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia")
# Modificamos tamaño de etiquetas
My_Theme = theme(
plot.title = element_text(size = 18),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma de CT", x="Ct",
y="Frecuencia") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="TGen", y="Ct") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="TGen", y="Ct") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Gen", y="Ct") +
facet_wrap(~ Tratamiento)+
My_Theme
# habilitar paquetes ggplot2
library(readxl) # Paquete para importar datos desde excel
library(tidyr) # Paquete para manipular datos
library(dplyr) # Paquete para manipular datos
library(ggplot2) # Paquete para hacer lindos gráficos en R
# Importa base de datos de CT en formato MESSY
messy <- read_excel("Delta-delta-method-template.xlsx")
head(messy)  # Muestra los primeros datos del data set
summary(messy)
# Colapsar columnas con Ct
messy %>% gather("Gen","Ct",3:6)
tidy <- messy %>% gather("Gen","Ct",3:6)
# Las variables de clasificación se deben transformar a factores.
tidy$Tratamiento <- as.factor(tidy$Tratamiento)
tidy$Sample <- as.factor(tidy$Sample)
tidy$Gen <- as.factor(tidy$Gen)
summary(tidy)
# Crear histograma con ggplot2
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia")
# Modificamos tamaño de etiquetas
My_Theme = theme(
plot.title = element_text(size = 18),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma de CT", x="Ct",
y="Frecuencia") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="TGen", y="Ct") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Gen", y="Ct") +
facet_wrap(~ Tratamiento)+
My_Theme
# habilitar paquetes ggplot2
library(readxl) # Paquete para importar datos desde excel
library(tidyr) # Paquete para manipular datos
library(dplyr) # Paquete para manipular datos
library(ggplot2) # Paquete para hacer lindos gráficos en R
# Importa base de datos de CT en formato MESSY
messy <- read_excel("Delta-delta-method-template.xlsx")
head(messy)  # Muestra los primeros datos del data set
summary(messy)
# Colapsar columnas con Ct
messy %>% gather("Gen","Ct",3:6)
tidy <- messy %>% gather("Gen","Ct",3:6)
# Las variables de clasificación se deben transformar a factores.
tidy$Tratamiento <- as.factor(tidy$Tratamiento)
tidy$Sample <- as.factor(tidy$Sample)
tidy$Gen <- as.factor(tidy$Gen)
summary(tidy)
# Crear histograma con ggplot2
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia")
# Modificamos tamaño de etiquetas
My_Theme = theme(
plot.title = element_text(size = 18),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma de CT", x="Ct",
y="Frecuencia") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="TGen", y="Ct") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Gen", y="Ct") +
facet_wrap(~ Tratamiento)+
My_Theme
# Crear boxplot por gen
ggplot(tidy, aes(x=Tratamiento, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Tratamiento", y="Ct") +
facet_wrap(~ Gen)+
My_Theme
# Crear boxplot por tratamiento
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Gen", y="Ct") +
facet_wrap(~ Tratamiento, scales = "free")+
My_Theme
# Crear boxplot por gen
ggplot(tidy, aes(x=Tratamiento, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Tratamiento", y="Ct") +
facet_wrap(~ Gen, scales = "free")+
My_Theme
# Crear boxplot por tratamiento
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Gen", y="Ct") +
facet_wrap(~ Tratamiento)+
My_Theme
# Crear boxplot por gen
ggplot(tidy, aes(x=Tratamiento, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Tratamiento", y="Ct") +
facet_wrap(~ Gen)+
My_Theme
# Crear boxplot por gen con escala independiente
ggplot(tidy, aes(x=Tratamiento, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Tratamiento", y="Ct") +
facet_wrap(~ Gen, scales = "free")+
My_Theme
View(messy)
View(messy)
messy %>% select(c(3:6))
View(messy)
select(GIr1, GIr2, HKr1, HKr2)
class(messy)
cor(messy[3:6], method = "spearman")
library(psych) # Graficas de correlación
pairs.panels(messy[3:6])
# Correlación entre muestras
cor(messy[3:6], method = "pearson")
pairs.panels(messy[3:6])
# Importa base de datos de CT de HK gene de Nogal en formato MESSY
messy <- read_excel("hkg_nogal.xlsx")
# habilitar paquetes ggplot2
library(readxl) # Paquete para importar datos desde excel
library(tidyr) # Paquete para manipular datos
library(dplyr) # Paquete para manipular datos
library(ggplot2) # Paquete para hacer lindos gráficos en R
library(psych) # Graficas de correlación
# Importa base de datos de CT de HK gene de Nogal en formato MESSY
messy <- read_excel("hkg_nogal.xlsx")
View(messy)
head(messy)  # Muestra los primeros datos del data set
summary(messy)
# Correlación entre muestras
cor(messy[3:6], method = "pearson")
library(readxl)
hkg_nogal <- read_excel("hkg_nogal.xlsx",
col_types = c("text", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(hkg_nogal)
# Importa base de datos de CT de HK gene de Nogal en formato MESSY
messy <- hkg_nogal <- read_excel("hkg_nogal.xlsx",
col_types = c("text", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
head(messy)  # Muestra los primeros datos del data set
summary(messy)
# Correlación entre muestras
cor(messy[3:9], method = "pearson")
pairs.panels(messy[3:9])
# Colapsar columnas con Ct
messy %>% gather("Gen","Ct",3:9)
tidy <- messy %>% gather("Gen","Ct",3:9)
# Las variables de clasificación se deben transformar a factores.
tidy$Sample <- as.factor(tidy$Sample)
tidy$Tissue <- as.factor(tidy$Tissue)
tidy$Gen <- as.factor(tidy$Gen)
summary(tidy)
View(tidy)
# Crear histograma con ggplot2
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia")
# Modificamos tamaño de etiquetas
My_Theme = theme(
plot.title = element_text(size = 18),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma de CT", x="Ct",
y="Frecuencia") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="TGen", y="Ct") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct, fill=Gen))+
geom_boxplot()+
labs(title="Boxplot de ct", x="TGen", y="Ct") +
My_Theme
# Crear boxplot por tejido
ggplot(tidy, aes(x=Gen, y= Ct, fill=Gen))+
geom_boxplot()+
labs(title="Boxplot de ct", x="Gen", y="Ct") +
facet_wrap(~ Tratamiento)+
My_Theme
# Crear boxplot por tejido
ggplot(tidy, aes(x=Gen, y= Ct, fill=Gen))+
geom_boxplot()+
labs(title="Boxplot de ct", x="Gen", y="Ct") +
facet_wrap(~ Tissue)+
My_Theme
# Modificamos tamaño de etiquetas
My_Theme = theme(
plot.title = element_text(size = 18),
axis.title.x = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
ggplot(tidy, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma de CT", x="Ct",
y="Frecuencia") +
My_Theme
# Crear boxplot
ggplot(tidy, aes(x=Gen, y= Ct, fill=Gen))+
geom_boxplot()+
labs(title="Boxplot de ct", x="TGen", y="Ct") +
My_Theme
# Crear boxplot por tejido
ggplot(tidy, aes(x=Gen, y= Ct, fill=Gen))+
geom_boxplot()+
labs(title="Boxplot de ct", x="Gen", y="Ct") +
facet_wrap(~ Tissue)+
My_Theme
# Crear boxplot por tejido
ggplot(tidy, aes(x=Gen, y= Ct, fill=Gen))+
geom_boxplot()+
labs(title="Boxplot de ct", x="HK Gene", y="Ct") +
facet_wrap(~ Tissue)+
My_Theme
# Crear boxplot por gen
ggplot(tidy, aes(x=Tissue, y= Ct, fill=Tissue))+
geom_boxplot(color="blue")+
labs(title="Boxplot de ct", x="Tissue", y="Ct") +
facet_wrap(~ Gen)+
My_Theme
# Crear boxplot por gen
ggplot(tidy, aes(x=Tissue, y= Ct, fill=Tissue))+
geom_boxplot()+
labs(title="Boxplot de ct", x="Tissue", y="Ct") +
facet_wrap(~ Gen)+
My_Theme
# Crear boxplot por gen con escala independiente
ggplot(tidy, aes(x=Tissue, y= Ct, fill=Tissue))+
geom_boxplot()+
labs(title="Boxplot de ct", x="Tissue", y="Ct") +
facet_wrap(~ Gen, scales="free")+
My_Theme
# Crear boxplot por gen con escala independiente y borrando etiquetas del eje x para que no solapen
My_Theme = theme(
plot.title = element_text(size = 18),
axis.title.x = element_text(size = 10),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
ggplot(tidy, aes(x=Tissue, y= Ct, fill=Tissue))+
geom_boxplot()+
labs(title="Boxplot de ct", x="Tissue", y="Ct") +
facet_wrap(~ Gen, scales="free")+
My_Theme
# Crear boxplot por gen con escala independiente y borrando etiquetas del eje x para que no solapen
My_Theme = theme(
plot.title = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
ggplot(tidy, aes(x=Tissue, y= Ct, fill=Tissue))+
geom_boxplot()+
labs(title="Boxplot de ct", x="Tissue", y="Ct") +
facet_wrap(~ Gen, scales="free")+
My_Theme
View(ExpresionG1)
View(FC_Gen1)
View(ExpresionG1)
# Importa base de datos de CT de HK gene de Nogal en formato MESSY
ExpresionG1 <- read_excel("FC_Gen1.xlsx")
Resumen_G1 <- ExpresionG1 %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_Expresion=mean(Expresion),
sd_Expresion=sd(Expresion))
ggplot(Resumen_G1, aes(x=Treatment, y=Mean_Expresion, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_Expresion-sd_Expresion, ymax=Mean_Expresion+sd_Expresion), width=.2,
position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (2^ddCt)",title="Gen 1")
# Remover objetos de la sesi?n de trabajo
rm(list = ls())
# habilitar paquetes ggplot2
library(readxl) # Paquete para importar datos desde excel
library(tidyr) # Paquete para manipular datos
library(dplyr) # Paquete para manipular datos
library(ggplot2) # Paquete para hacer lindos gráficos en R
library(psych) # Graficas de correlación
# Importa base de datos de CT de HK gene de Nogal en formato MESSY
ExpresionG1 <- read_excel("FC_Gen1.xlsx")
Resumen_G1 <- ExpresionG1 %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_Expresion=mean(Expresion),
sd_Expresion=sd(Expresion))
ggplot(Resumen_G1, aes(x=Treatment, y=Mean_Expresion, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_Expresion-sd_Expresion, ymax=Mean_Expresion+sd_Expresion), width=.2,
position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (2^ddCt)",title="Gen 1")
# Crear histograma con ggplot2
ggplot(ExpresionG1, aes(Ct))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia")
# Crear histograma con ggplot2
ggplot(ExpresionG1, aes(ExpresionG1))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia")
# Crear histograma con ggplot2
ggplot(ExpresionG1, aes(Expresion))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="Ct",
y="Frecuencia")
# Crear histograma con ggplot2
ggplot(ExpresionG1, aes(Expresion))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma de FC", x="Fold Change (2^ddCt)",
y="Frecuencia")
# Crear boxplot
ggplot(ExpresionG1, aes(x=Treatment, y=Expresion, fill=Treatment))+
geom_boxplot()+
labs(y="Fold Change (2^ddCt)",title="Gen 1")
# Crear boxplot + jitter
ggplot(ExpresionG1, aes(x=Treatment, y=Expresion, fill=Treatment))+
geom_boxplot()+
labs(y="Fold Change (2^ddCt)",title="Gen 1")+
geom_jitter(color="#A52A2A")
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(UsingR)
library(dplyr)
knitr::include_graphics("Inferencia.png")
gen.corr.data<- function(rho,n){
# first step: generate two normal random variables from normal distrbution
set.seed(123)
X <- rnorm(n)
X2 <- rnorm(n)
# second step generate the correlated variable
Y<- rho*X+ sqrt(1-rho^2)*X2
result <-cbind(X,Y)
return(result)
}
muestra<-gen.corr.data(0.01,50000)
plot(muestra)
dat<- as.data.frame(muestra)
# cor.test(dat$x1, dat$x3)
knitr::include_graphics("punto_de_corte.png")
knitr::include_graphics("no_concluyente.png")
