wilcox.test(normal, tumoral, alternative = "g",
paired = FALSE)
# Realiza prueba de Mann-Whitney
wilcox.test(normal, tumoral, alternative = "g",
paired = FALSE)
# Realiza prueba de Mann-Whitney
wilcox.test(normal, tumoral, alternative = "g",
paired = FALSE)
N0 <- c(1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100,110) # 0 min
N10 <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2) # 10 min
N20 <- c(0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.3) # 20 min
N45 <- c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.2) # 45 min
kruskal.test(list(N0, N10, N20, N45))
data <- data.frame(N0, N10, N20, N45)
tidy <- data %>% gather("Time","FC", 1:4)
dunnTest(FC ~ Time,
data=tidy,
method="bonferroni")
# Test de Chi-squared en R (chisq.test)
test<-chisq.test(datos, correct = FALSE)
datos
test$expected
test
datos
# Test de Chi-squared en R (chisq.test)
test<-chisq.test(datos, correct = FALSE)
test
# Crea matriz de datos
datos <- c(9, 1, 2, 7)
dim(datos) <- c(2,2)
class(datos)
colnames(datos) <- c('Euploides','Aneuploides')
datos
# Test de Chi-squared en R (chisq.test)
test<-chisq.test(datos, correct = FALSE)
test
# Crea matriz de datos
datos <- c(9, 1, 2, 7)
dim(datos) <- c(2,2)
rownames(datos) <- c('Euploides','Aneuploides')
colnames(datos) <- c('Expresado','No expresado')
datos
# Test de Chi-squared en R (chisq.test)
test<-chisq.test(datos, correct = FALSE)
test
knitr::include_graphics("M-W_test.png")
knitr::include_graphics("Wilcoxon_test.png")
# Crea objetos pre y post
data <- data.frame(Tratamiento = rep(c("Pre", "Post"), each = 10),
FC = c(runif(10, 0.5, 6),
runif(10, 0.1, 1.9)))
View(data)
# Realiza prueba de Wilcoxon
wilcox.test(post - pre, alternative = "two-sided")
# Crea objetos pre y post
data <- data.frame(Tratamiento = rep(c("ore", "post"), each = 10),
FC = c(runif(10, 0.5, 6),
runif(10, 0.1, 1.9)))
# Realiza prueba de Wilcoxon
wilcox.test(post - pre, alternative = "two-sided")
# Crea objetos pre y post
data <- data.frame(Tratamiento = rep(c("pre", "post"), each = 10),
FC = c(runif(10, 0.5, 6),
runif(10, 0.1, 1.9)))
# Realiza prueba de Wilcoxon
wilcox.test(post - pre, alternative = "two-sided")
# Realiza prueba de Wilcoxon
wilcox.test(FC ~ Tratamiento, data = data, alternative = "two-sided")
# Realiza prueba de Wilcoxon
wilcox.test(FC ~ Tratamiento, data = data, alternative = "two.sided")
# no es necesario indicar muestras pareadas
# pues estamos haciendo la resta en la función.
# Realiza prueba de Wilcoxon
wilcox.test(FC ~ Tratamiento, data = data,
alternative = "two.sided",
paired = TRUE)
# no es necesario indicar muestras pareadas
# pues estamos haciendo la resta en la función.
# Realiza prueba de Mann-Whitney
wilcox.test(normal, tumoral, alternative = "two.sided",
paired = FALSE) %>% kable()
kruskal.test(list(N0, N10, N20, N45)) %>% kable()
kruskal.test(list(N0, N10, N20, N45)) %>% pander()
knitr::opts_chunk$set(echo = FALSE)
library(car)
library(lmtest)
library(ggplot2)
library(tidyr)
library(dplyr)
library(permute)
library(knitr)
library(FSA) #perform Dunn's Test with Bonferroni correction for p-values
library(pander) # da formato a tablas estadisticas
kruskal.test(list(N0, N10, N20, N45)) %>% pander()
# Realiza prueba de Wilcoxon
wilcox.test(FC ~ Tratamiento, data = data,
alternative = "two.sided",
paired = TRUE) %>% pander()
# Realiza test de correlación
cor.test(gene_number,expression, method = "spearman",
alternative = "two.sided") %>% pander()
dunnTest(FC ~ Time,
data=tidy,
method="bonferroni") %>% pander()
datos
# Test de Chi-squared en R (chisq.test)
test<-chisq.test(datos, correct = FALSE)
test %>% pander()
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(FSA) #perform Dunn's Test with Bonferroni correction for p-values
library(pander) # da formato a tablas estadisticas
# Realiza prueba de Mann-Whitney
wilcox.test(normal, tumoral, alternative = "two.sided",
paired = FALSE) %>% pander()
# Remover objetos de la sesi?n de trabajo
rm(list = ls())
# Paquetes
library(ggplot2)
library(tidyr)
library(dplyr)
library(FSA) #perform Dunn's Test with Bonferroni correction for p-values
library(pander) # da formato a tablas estadisticas
# Crea objetos X (Nº copias gen) e Y (Expresión relativa)
gene_number <- c(13,25,34,46,44,36)
expression <- c(0.5,0.2,1.4,2.4,1.7,0.8)
# Realiza test de correlación
cor.test(gene_number,expression, method = "spearman",
alternative = "two.sided") %>% pander()
# Crea objetos tratamiento y control
normal <- c(0.8,0.9, 1.5,1.6,1.6,1.7,1.7,1.9,3.0,3.2,3.9)
tumoral <- c(0.4,0.4,0.5,0.6,0.6,0.8,0.8,1.0,1.3,1.3,1.4,1.4,1.5,1.6)
ggplot(Arabidopsis, aes(x=Sample, y=ΔCt , fill=Sample))+
geom_jitter()+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun.y= median, geom="crossbar", width=0.5, color="red")
# ordena datos en formato tidy
cdk18 <- data.frame(normal, tumoral)
cdk18 <- data.frame(Tratamiento = rep(c("normal", "tumoral"), each = 20),
FC = c(runif(20, 0.8,3.9),
runif(20, 0.4, 1.6)))
# ordena datos en formato tidy
tidy <- cdk18 %>% gather("Tratamiento","FC", 1:4)
View(cdk18)
View(cdk18)
ggplot(cdk18, aes(x=Tratamiento, y=FC, fill=Tratamiento))+
geom_jitter()+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun.y= median, geom="crossbar", width=0.5, color="red")
ggplot(cdk18, aes(x=Tratamiento, y=FC, fill=Tratamiento))+
geom_jitter()+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="red")
ggplot(cdk18, aes(x=Tratamiento, y=FC, fill=Tratamiento))+
geom_jitter()+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, fill=Tratamiento))+
geom_jitter(fill=Tratamiento)+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, fill=Tratamiento))+
geom_jitter(fill=Tratamiento)+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter()+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter()+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.2, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter()+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.25)+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.20)+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="Delta Ct Normal y tumoral.", x="Sample", y="Delta Ct") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC normal v/s tumoral.", x="Sample", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Sample", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
library(ggpubr) # estética y  estadistica
cmpr <- list(c("normal","tratamiento"))
myplot + stat_compare_means(comparisons = cmpr, tip.length=0.01,
label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
myplot <- ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
cmpr <- list(c("normal","tratamiento"))
myplot + stat_compare_means(comparisons = cmpr, tip.length=0.01,
label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means()
myplot <- ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(tip.length=0.01)
myplot <- ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(tip.length=0.01, label = "p.signif")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = cmpr, tip.length=0.01, label = "p.signif")
myplot <- ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = c("normal","tratamiento"), tip.length=0.01, label = "p.signif")
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = c("normal","tratamiento"), tip.length=0.01, label = "p.signif")
myplot <-
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = c("normal","tratamiento"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
myplot <-
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_boxplot()+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = c("normal","tratamiento"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_boxplot()+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = c("normal","tratamiento"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = c("normal","tratamiento"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
myplot <-
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_compare_means(comparisons = c("normal","tratamiento"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_compare_means(comparisons = c("normal","tratamiento"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = c("normal","tumoral"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
myplot <-
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = c("normal","tumoral"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
myplot <-
ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")+
stat_compare_means(comparisons = c("normal","tumoral"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
myplot <-  ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
myplot +  stat_compare_means(comparisons = c("normal","tumoral"), tip.length=0.01, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", "ns")))
myplot +  stat_compare_means(data=cdk18, aes(x=Tratamiento, y=FC, fill=Tratamiento), size=5)
myplot +  stat_compare_means(data=cdk18, aes(x=Tratamiento, y=FC), size=5)
myplot +  stat_compare_means(data=cdk18, aes(x=Tratamiento, y=FC), size=3)
myplot +  stat_compare_means(data=cdk18, aes(x=Tratamiento, y=FC), size=3)+
geom_signif(textsize = 12, vjust = 0.7, step_increase=0.12)
myplot <-  ggplot(cdk18, aes(x=Tratamiento, y=FC, color=Tratamiento))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
myplot
# Agrega barras de significancia
my_comparisons <- list( c("normal", "tumoral"))
View(my_comparisons)
myplot + stat_compare_means(comparisons = my_comparisons, label.y = c(3.5))
myplot + stat_compare_means(comparisons = my_comparisons, label.y = c(3.8))
myplot + stat_compare_means(comparisons = my_comparisons, label.y = c(3.8))+
stat_compare_means(label.y = 3.5)     # Add global Anova p-val
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 3.5)     # Add global Anova p-val
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.5)     # Add global Anova p-val
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)     # Add global Anova p-val
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..),
method = "t.test", ref.group = "normal")
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..),
method = "t.test")
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..))
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..), label.y = 4.0)
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..), label.y = 4.0, label.x = 1)
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..), label.y = 4.0, label.x = 2)
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..), label.y = 4.0, label.x = 1.5)
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..), label.y = 3.5, label.x = 1.5)
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..), label.y = 3.6, label.x = 1.5)
myplot + stat_compare_means(comparisons = my_comparisons)
myplot + stat_compare_means(comparisons = my_comparisons, label.y = 4.0)
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0
myplot + stat_compare_means(comparisons = my_comparisons) +
stat_compare_means(label.y = 4.0)
# Agrega barras de significancia
my_comparisons <- list( c("normal", "tumoral"))
myplot + stat_compare_means(comparisons = my_comparisons, method = "wilcox.test")
myplot + stat_compare_means(comparisons = my_comparisons, method = "wilcox.test", label.y = 4.0)
myplot + stat_compare_means(comparisons = my_comparisons, method = "wilcox.test")+
stat_compare_means(label.y = 4.0)
myplot + stat_compare_means(comparisons = my_comparisons, method = "wilcox.test")+
stat_compare_means(label.y = 4.0)+
stat_compare_means(aes(label = ..p.signif..), label.y = 3.6, label.x = 1.5)
myplot + stat_compare_means(comparisons = my_comparisons, method = "wilcox.test")
aes(label = paste0("p =", ..p.format..))
myplot + stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",
aes(label = paste0("p =", ..p.format..)))
myplot + stat_compare_means(comparisons = my_comparisons, method = "wilcox.test", aes(label = paste0("p =", ..p.format..)))
myplot + stat_compare_means(comparisons = my_comparisons, method = "wilcox.test")+
stat_compare_means(aes(label = paste0("p = ", ..p.format..)))
myplot + stat_compare_means(method = "wilcox.test")
myplot + stat_compare_means(method = "wilcox.test", label.y = 4.0)
myplot + stat_compare_means(method = "wilcox.test", label.y = 3.8)
myplot + stat_compare_means(method = "wilcox.test", label.y = 3.7)
myplot + stat_compare_means(method = "wilcox.test", label.y = 3.7, label.x = 2)
myplot + stat_compare_means(method = "wilcox.test", label.y = 3.7, label.x = 1.5)
myplot + stat_compare_means(method = "wilcox.test", label.y = 3.7, label.x = 1.2)
# Agrega barras de significancia
myplot + stat_compare_means(method = "wilcox.test", label.y = 3.7, label.x = 1.2)
myplot + stat_compare_means(comparisons = c("normal","tumoral"), label = "p.signif")
myplot + stat_compare_means(comparisons = c("normal","tumoral"))
myplot + stat_compare_means(comparisons = list(c("normal","tumoral")))
myplot + stat_compare_means(comparisons = list(c("normal","tumoral")), label = "p.signif")
myplot + stat_compare_means(method = "wilcox.test", label.y = 3.7, label.x = 1.2)+
stat_compare_means(comparisons = list(c("normal","tumoral")), label = "p.signif")
myplot + stat_compare_means(method = "wilcox.test", label.y = 4.0, label.x = 1.2)+
stat_compare_means(comparisons = list(c("normal","tumoral")), label = "p.signif")
# Simula datos
data <- data.frame(Tratamiento = rep(c("N0", "N10", "N20", "N45"), each = 20),
FC = c(runif(20, 1,110),
runif(20, 0.1, 2),
runif(20, 0.3, 2.3),
runif(20, 0.2, 2.2)))
View(data)
# Simula datos
data <- data.frame(Tiempo = rep(c("N0", "N10", "N20", "N45"), each = 20),
FC = c(runif(20, 1,110),
runif(20, 0.1, 2),
runif(20, 0.3, 2.3),
runif(20, 0.2, 2.2)))
# Realiza prieba de kruskal
kruskal.test(FC ~ Time,data=data) %>% pander()
# Simula datos
data <- data.frame(Time = rep(c("N0", "N10", "N20", "N45"), each = 20),
FC = c(runif(20, 1,110),
runif(20, 0.1, 2),
runif(20, 0.3, 2.3),
runif(20, 0.2, 2.2)))
# Realiza prieba de kruskal
kruskal.test(FC ~ Time, data=data) %>% pander()
# Realice prueba de dunn
dunnTest(FC ~ Time,
data=tidy,
method="bonferroni")
# Realice prueba de dunn
dunnTest(FC ~ Time,
data=data,
method="bonferroni")
myplot <-  ggplot(data, aes(x=Tiempo, y=FC, color=Tiempo))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
# Simula datos
data <- data.frame(Time = rep(c("N0", "N10", "N20", "N45"), each = 20),
FC = c(runif(20, 1,110),
runif(20, 0.1, 2),
runif(20, 0.3, 2.3),
runif(20, 0.2, 2.2)))
myplot <-  ggplot(data, aes(x=Tiempo, y=FC, color=Tiempo))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
myplot <-  ggplot(data, aes(x=Time, y=FC, color=Time))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
myplot
myplot <-  ggplot(data, aes(x=Time, y=log(FC), color=Time))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
myplot
myplot <-  ggplot(data, aes(x=Time, y=FC, color=Time))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
myplot
myplot_log
myplot_log <-  ggplot(data, aes(x=Time, y=log(FC), color=Time))+
geom_jitter(width = 0.10)+
labs(title="FC cdk18 normal v/s tumoral.", x="Tratamiento", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
myplot_log
myplot <-  ggplot(data, aes(x=Time, y=FC, color=Time))+
geom_jitter(width = 0.10)+
labs(title="FC SLC6A14 normal v/s tumoral.", x="Tiempo", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
myplot
myplot_log <-  ggplot(data, aes(x=Time, y=log(FC), color=Time))+
geom_jitter(width = 0.10)+
labs(title="FC SLC6A14 normal v/s tumoral.", x="Tiempo", y="FC") +
stat_summary(fun= median, geom="crossbar", width=0.5, color="black")
myplot_log
# Realiza prieba de kruskal
kruskal.test(FC ~ Time, data=data) %>% pander()
# Realice prueba de dunn
dunnTest(FC ~ Time,
data=data,
method="bonferroni")
myplot_log + stat_compare_means(comparisons = list(c("normal","tumoral")), label = "p.signif")
myplot_log + stat_compare_means(comparisons = list(c("N0", "N10", "N20", "N45")), label = "p.signif")
myplot_log + stat_compare_means(comparisons = list(c("N0", "N10"),c("N0", "N20"), c("N0", "N45")), label = "p.signif")
# Agrega significancia al plot
myplot + stat_compare_means(method = 'kruskal.test', label.y = 5.5, label.x = 1)
# Agrega significancia al plot
myplot_log + stat_compare_means(method = 'kruskal.test', label.y = 5.5, label.x = 1)
myplot_log + stat_compare_means(comparisons = list(c("N0", "N10"),c("N0", "N20"), c("N0", "N45")),
label = "p.signif")
myplot_log + stat_compare_means(method = 'kruskal.test', label.y = 5.5, label.x = 1) +
stat_compare_means(comparisons = list(c("N0", "N10"),c("N0", "N20"), c("N0", "N45")),
label = "p.signif")
myplot_log + stat_compare_means(method = 'kruskal.test', label.y = 7, label.x = 1) +
stat_compare_means(comparisons = list(c("N0", "N10"),c("N0", "N20"), c("N0", "N45")),
label = "p.signif")
myplot_log + stat_compare_means(method = 'kruskal.test', label.y = 7.5, label.x = 1) +
stat_compare_means(comparisons = list(c("N0", "N10"),c("N0", "N20"), c("N0", "N45")),
label = "p.signif")
