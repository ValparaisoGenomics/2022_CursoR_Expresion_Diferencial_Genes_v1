library(readxl)
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(RNA_sample)
# Version R
version
R.version.string
# Listar paquetes disponibles en mi entorno de trabajo
search()
# Listar archivos en el directorio actual
list.files()
# Crear un objeto
Nombres <- c("José Gallardo", "Debora Torrealba")
# Características de un objeto
class(Nombres)
colnames(Nombres)
Sexo <- c(1,2) # Codificamos 1= varón ; 2= mujer
Estatura <- c(1.73,1.63) # Punto indica decimales.
Albinismo <- c(0,0) # # Codificamos 0= No ; 1= Si
Genotipo <- c("TT","Tt")
Profesores <- data.frame(Nombres,Sexo,Estatura,Albinismo,Genotipo)
# Explorar un objeto con [] y con $
Profesores[1,1]
Profesores[1,]
Profesores[2,6] # da NULL
Profesores[c(1:2),"Albinismo"]
Profesores$Nombres
Profesores$Nombres[-1] # excluye datos
# Listar objetos
ls()
# Obtener ayuda de un comando
help("mean")
mean(Profesores$Estatura)
mean(Profesores$Nombres) # da error porque nombres no es numérico.
Profesores$Sexo <- as.factor(Profesores$Sexo)
mean(Profesores$Sexo)
class(Profesores$Sexo)
Profesores$Sexo
# ¿Cómo habilitar paquetes?
library(readxl)
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Remover objetos de la sesión de trabajo
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE)
library(readxl)
library(dplyr)
library(ggplot2)
# library(UsingR)
library(ggpmisc)
library(knitr)
library(car)
library(lmtest)
library(gridExtra)
Sea_level <- read_excel("Sea_level.xlsx")
r <- Sea_level %>%
filter(Year > 1992) %>% ggplot(aes(x = `Consumo de helados Chile (Litros)`, y = `NOAA - Adjusted sea level (cm)`)) +
geom_point(colour="black") +
stat_smooth(method = "lm", col = "black", show.legend=TRUE)+scale_x_continuous(n.breaks = 8)
r + My_Theme + ggtitle("Relación aumento del nivel del mar y consumo de helados en Chile.")
age.aspa <- read_excel("age.aspa.xlsx")
head(age.aspa)
age.aspa <- read_excel("age.aspa.xlsx")
head(age.aspa)
# ¿Cómo habilitar paquetes?
library(readxl)
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Graficas sencillas para explorar
hist(RNA_sample$)
# Graficas sencillas para explorar
hist(RNA_sample$Tota_RNA_ug)
plot(RNA_sample$Tota_RNA_ug, RNA_sample$`260_280`)
plot(RNA_sample$Tota_RNA_ug, RNA_sample$`260_230`)
plot(RNA_sample$Tota_RNA_ug, RNA_sample$RIN_bioanalyzer)
cor(RNA_sample$Tota_RNA_ug, RNA_sample$RIN_bioanalyzer)
hist(RNA_sample$`260_280`)
hist(RNA_sample$`260_230`)
hist(RNA_sample$RIN_bioanalyzer)
plot(RNA_sample$Tota_RNA_ug, RNA_sample$`260_280`)
cor(RNA_sample$Tota_RNA_ug, RNA_sample$`260_280`)
plot(RNA_sample$Tota_RNA_ug, RNA_sample$`260_280`)
cor(RNA_sample$Tota_RNA_ug, RNA_sample$`260_280`)
plot(RNA_sample$Tota_RNA_ug, RNA_sample$`260_230`)
cor(RNA_sample$Tota_RNA_ug, RNA_sample$`260_230`)
plot(RNA_sample$Tota_RNA_ug, RNA_sample$RIN_bioanalyzer)
cor(RNA_sample$Tota_RNA_ug, RNA_sample$RIN_bioanalyzer)
knitr::opts_chunk$set(echo = FALSE)
library(MASS)
library(psych)
library(ggplot2)
library(pander)
library(dplyr)
require(gridExtra)
library(grid)
knitr::include_graphics("EDA.png")
knitr::include_graphics("EDA.png")
setwd("~/Dropbox/VINCULACION CON EL MEDIO/AEA/2022/Curso_Expresion_Genes/GeneExpression_2022/Clase_05")
knitr::include_graphics("EDA.png")
knitr::include_graphics("EDA.png")
ggplot(CO2, aes(uptake))
knitr::include_graphics("ggplot2_logo.png")
knitr::include_graphics("ggplot2_logo.png")
knitr::opts_chunk$set(echo = FALSE)
library(MASS)
library(psych)
library(ggplot2)
library(pander)
library(dplyr)
require(gridExtra)
library(grid)
library(readxl)
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(RNA_sample)
ggplot(CRNA_sample, aes(Total_RNA_ug))
ggplot(RNA_sample, aes(Total_RNA_ug))
ggplot(RNA_sample, aes(Total_RNA_ug)) +
geom_histogram(color="white", fill="blue", bins = 10) +
theme_classic()
ggplot(CO2, aes(uptake))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia") + theme_gray()
ggplot(RNA_sample, aes(Total_RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia") + theme_gray()
ggplot(RNA_sample, aes(Total_RNA_ug)) +
geom_histogram(color="white", fill="blue", bins = 10)
ggplot(RNA_sample, aes(Total_RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia")
plot_1 + My_Theme
My_Theme = theme(
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 18))
plot_1 <- ggplot(RNA_sample, aes(Total_RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia")
plot_1 + My_Theme
ggplot(RNA_sample, aes(x=Sample, y= Total_RNA_ug))+
geom_boxplot(color="blue")+
labs( x="Tratamiento", y="Consumo de CO2") + My_Theme
ggplot(RNA_sample, aes(x=Sample, y= Total_RNA_ug))+
geom_boxplot(color="blue")+
labs( x="Tipo de muestra", y="ARN total (ug)") + My_Theme
knitr::include_graphics("data-science-explore.png")
knitr::include_graphics("data-science-explore.png")
knitr::include_graphics("paquetes.png")
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
head(RNA_sample)
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
head(RNA_sample[,1:4])
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
head(RNA_sample[,1:4])
ggplot(RNA_sample, aes(Total_RNA_ug))
ggplot(RNA_sample, aes(Total_RNA_ug)) +
geom_histogram(color="white", fill="blue", bins = 10)
ggplot(RNA_sample, aes(Total_RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia")
My_Theme = theme(
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 18))
plot_1 <- ggplot(RNA_sample, aes(Total_RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia")
plot_1 + My_Theme
ggplot(RNA_sample, aes(x=Sample, y= Total_RNA_ug))+
geom_boxplot(color="blue")+
labs( x="Tipo de muestra", y="ARN total (ug)") + My_Theme
ggplot(RNA_sample, aes(x=Type, y= Total_RNA_ug))+
geom_boxplot(color="blue")+
labs( x="Tipo de muestra", y="ARN total (ug)") + My_Theme
knitr::include_graphics("pipe.png")
ls()
rm(ls())
rm(list=ls())
# Exploramos el objeto
class(RNA_sample)
# habilitar paquetes ggplot2
library(ggplot2) # Paquete para hacer lindos gráficos en R
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Exploramos el objeto
class(RNA_sample)
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
excel
# habilitar paquetes ggplot2
library(readxl) # importa datos desde excel
library(ggplot2) # Paquete para hacer lindos gráficos en R
library(dplyr) # Manipula datos
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Exploramos el objeto
class(RNA_sample)
dim(RNA_sample)
head(RNA_sample)
head(RNA_sample[,1:6])
head(RNA_sample[,1:4])
summary(RNA_sample)
summary(RNA_sample)
head(RNA_sample[,5.7])
head(RNA_sample[,5:7])
# summary(RNA_sample) muy util para observar variabilidad de nuestros datos
summary(RNA_sample)
# Las variables de clasificacion se deben transformar a factores.
RNA_sample$Type <- as.factor(RNA_sample$Type)
RNA_sample$Sample <- as.factor(RNA_sample$Sample)
summary(RNA_sample)
# Crear gráfica por capas con ggplot2
# 1era capa con función ggplot.
# La gráfica queda vacía pues falta indicar el tipo de gráfica que deseamos
ggplot(RNA_sample, aes(RNA_ug))
# Histograma con ggplot.
ggplot(RNA_sample, aes(RNA_ug)) +
geom_histogram(color="white", fill="blue", bins = 10)
# Histograma con ggplot.
ggplot(RNA_sample, aes(RNA_ug)) +
geom_histogram(color="white", fill="blue")
ggplot(RNA_sample, aes(RNA_ug)) +
geom_histogram(color="white", fill="blue", bins = 10)
# Agregamos titulo y nombre de los ejes
ggplot(CO2, aes(uptake))+
geom_histogram()+
labs(title="Histograma", x="Consumo de CO2",
y="Frecuencia")
ggplot(RNA_sample, aes(RNA_ug)) +
geom_histogram(color="white", fill="blue", bins = 8)
ggplot(RNA_sample, aes(RNA_ug)) +
geom_histogram(color="white", fill="blue", bins = 10)
# Histograma con ggplot.
ggplot(RNA_sample, aes(RNA_ug)) +
geom_histogram()
# agregamos estetica de color
ggplot(RNA_sample, aes(RNA_ug)) +
geom_histogram(color="white", fill="blue")
# Agregamos titulo y nombre de los ejes
ggplot(RNA_sample, aes(RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia")
# Modificamos tamaño de etiquetas
My_Theme = theme(
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 18))
ggplot(RNA_sample, aes(RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia") +
My_Theme
View(My_Theme)
# Modificamos tamaño de etiquetas
theme
# Modificamos tamaño de etiquetas
# https://ggplot2.tidyverse.org/reference/theme.html
My_Theme = theme(
legend.key.size= 18,
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 18))
ggplot(RNA_sample, aes(RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia") +
My_Theme
# Modificamos tamaño de etiquetas
# https://ggplot2.tidyverse.org/reference/theme.html
My_Theme = theme(
legend.key.size= element_text(size = 18),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.y = element_text(size = 18))
ggplot(RNA_sample, aes(RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia") +
My_Theme
# Modificamos tamaño de etiquetas
# https://ggplot2.tidyverse.org/reference/theme.html
My_Theme = theme(
plot.title = element_text(size = 20),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
ggplot(RNA_sample, aes(RNA_ug))+
geom_histogram(color="white", fill="blue", bins = 10)+
labs(title="Histograma", x="ARN total (ug)",
y="Frecuencia") +
My_Theme
# Crear boxplot
# Primera capa con dos ejes x e y
ggplot(RNA_sample, aes(x=Type, y= RNA_ug))
# Gráfica de boxplot
ggplot(RNA_sample, aes(x=Type, y= RNA_ug))+
geom_boxplot()
# agregamos estética de color
ggplot(RNA_sample, aes(x=Type, y= RNA_ug))+
geom_boxplot(color="blue")
# agregamos nombre de ejes y cambiamos tamaño de letra
ggplot(RNA_sample, aes(x=Type, y= RNA_ug))+
geom_boxplot(color="blue")+
labs( x="Tipo de muestra", y="ARN total (ug)") +
My_Theme
# agregamos nombre de ejes y cambiamos tamaño de letra
ggplot(RNA_sample, aes(x=Type, y= RNA_ug))+
geom_boxplot(color="blue")+
labs(title="Boxplot", x="Tipo de muestra", y="ARN total (ug)") +
My_Theme
# Limpia objetos del ambiente de trabajo
ls()
# Limpia objetos del ambiente de trabajo
ls()
rm(list=ls())
# Habilita librerías
library(readxl) # Para importar datos desde excel a R
library(tidyr) # Para manipular datos
library(dplyr) # Para manipular datos
library(ggplot2) # Para hacer gráficos
x <- rnorm(5)
y <- rnorm(5)
dat <- data.frame(x,y)
dat
max(dat)
dat %>% max
# Importa base de datos en formato .xlsx
RNA_sample <- read_excel("RNA_sample_NA.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Las variables de clasificacion se deben transformar a factores.
RNA_sample$Type <- as.factor(RNA_sample$Type)
RNA_sample$Sample <- as.factor(RNA_sample$Sample)
summary(RNA_sample)
# Importa base de datos en formato .xlsx
RNA_sample_NA <- read_excel("RNA_sample_NA.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Las variables de clasificacion se deben transformar a factores.
RNA_sample$Type <- as.factor(RNA_sample$Type)
RNA_sample$Sample <- as.factor(RNA_sample$Sample)
summary(RNA_sample_NA)
View(RNA_sample_NA)
# Seleccionar columnas
RNA_sample_NA %>% select(Type, RIN)
View(RNA_sample_NA)
# Importa base de datos en formato .xlsx
RNA_sample_NA <- read_excel("RNA_sample_NA.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Las variables de clasificacion se deben transformar a factores.
RNA_sample$Type <- as.factor(RNA_sample$Type)
RNA_sample$Sample <- as.factor(RNA_sample$Sample)
summary(RNA_sample_NA)
# Seleccionar columnas
RNA_sample_NA %>% select(Type, RIN)
View(RNA_sample_NA)
# Importa base de datos en formato .xlsx
RNA_sample_NA <- read_excel("RNA_sample_NA.xlsx",
col_types = c("text","text", "numeric", "numeric",
"numeric", "numeric", "numeric"))
# Las variables de clasificacion se deben transformar a factores.
RNA_sample$Type <- as.factor(RNA_sample$Type)
RNA_sample$Sample <- as.factor(RNA_sample$Sample)
summary(RNA_sample_NA)
# Seleccionar columnas
RNA_sample_NA %>% select(Type, RIN)
RNA_sample_NA %>% select(Sample, `260_280`, `260_230`, RIN)
# Filtrar variable peso con tuberíapor categoría
RNA_sample_NA %>% filter(Type=="Pig")
# Filtrar variable peso con tuberíapor categoría
RNA_sample_NA %>% filter(Type=="Human")
# MÚLTIPLES FUNCIONES Y TUBERÍAS
RNA_sample_NA %>% select(Type, RIN) %>%
filter(Type=="Human")
# Eliminar muestras con baja calidad
RNA_sample_NA %>% filter(RIN>7)
View(RNA_sample_NA)
# Eliminar muestras con baja calidad
RNA_sample_NA %>% filter(RIN>7.8)
# Eliminar muestras con baja calidad
RNA_sample_NA %>% filter(RIN>=7.8)
View(RNA_sample_NA)
View(RNA_sample)
RNA_sample_NA %>% filter(`260_230`>1)
# Eliminar muestras con baja calidad
RNA_sample_NA %>% filter(RIN>7)
RNA_sample_NA %>% filter(`260_230`>1)
# datos filtrados
dat_qc <- RNA_sample_NA %>% filter(RIN>7) %>% filter(`260_230`>1)
dat_qc
# FUNCIÓN SUMMARIZE()
dat_qc %>% select(RNA_ug, RIN) %>%
summarize(n = n(),
Promedio_RNA = mean(RNA_ug),
Promedio_RIN = max(RIN))
summarize(n = n(),
Promedio_RNA = mean(RNA_ug),
Promedio_RIN = max(RIN))
# FUNCIÓN GROUP_BY() + SUMMARIZE()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
dat_qc%>% group_by(Type) %>%
summarize(n = n(),
Promedio_RNA = mean(RNA_ug),
Promedio_RIN = max(RIN))
# FUNCIÓN SUMMARIZE()
dat_qc %>% summarize(n = n(),
Promedio_RNA = mean(RNA_ug),
Promedio_RIN = max(RIN))
# FUNCIÓN GROUP_BY() + SUMMARIZE()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
dat_qc%>% group_by(Type) %>%
summarize(n = n(),
Promedio_RNA = mean(RNA_ug),
Promedio_RIN = max(RIN))
RIN_table <- dat_qc %>% group_by(Type) %>%
summarize(n = n(),
Promedio_RIN = mean(RIN),
sd_RIN = sd(RIN))
View(RIN_table)
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
# Calcularemos el coeficiente de variación como  sd / mean * 100
RIN_table %>% mutate(CV_RIN = sd_RIN/Promedio_RIN*100)
# FUNCIÓN SUMMARIZE()
dat_qc %>% summarize(n = n(),
Promedio_RNA = mean(RNA_ug),
Promedio_RIN = mean(RIN))
# FUNCIÓN GROUP_BY() + SUMMARIZE()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
dat_qc %>% group_by(Type) %>%
summarize(n = n(),
Promedio_RIN = mean(RIN),
sd_RIN = sd(RIN))
# FUNCIÓN SUMMARIZE()
dat_qc %>% summarize(n = n(),
Promedio_RNA = mean(RNA_ug),
Promedio_RIN = mean(RIN))
# FUNCIÓN GROUP_BY() + SUMMARIZE()
# Permite agrupar filas con base a los niveles de alguna variable o factor.
dat_qc %>% group_by(Type) %>%
summarize(n = n(),
Promedio_RIN = mean(RIN),
sd_RIN = sd(RIN))
RIN_table <- dat_qc %>% group_by(Type) %>%
summarize(n = n(),
Promedio_RIN = mean(RIN),
sd_RIN = sd(RIN))
# FUNCIÓN MUTATE()
# Permite calcular nuevas variables "derivadas", ej. proporciones, tasas, log.
# Calcularemos el coeficiente de variación como  sd / mean * 100
RIN_table %>% mutate(CV_RIN = sd_RIN/Promedio_RIN*100)
