Prom_Int_CP2<-as.numeric(Prom_Int_CP2)
# Calculo de expresion
Expresion_Pfaffl_G2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen2, Eficiencia2)%>%
mutate(DeltaGR_CP2=Prom_Ref_CP2-Gen_ref, E_DeltaGR_CP2=Eficiencia2^(DeltaGR_CP2))%>%
mutate(DeltaGI_IP2=Prom_Int_CP2-Gen2, E_DeltaGI_CP2=Eficiencia2^(DeltaGI_IP2))%>%
mutate(ExpresionP2=E_DeltaGI_CP2/E_DeltaGR_CP2)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G2<-Expresion_Pfaffl_G2%>%
select(Treatment, ExpresionP2)%>%
group_by(Treatment)%>%
summarize(n=n(),
Mean_ExpresionP2=mean(ExpresionP2),
sd_ExpresionP2=sd(ExpresionP2))
# Grafico de barras Fold-change
Pfaffl_Gen2<-ggplot(Resumen_Pfaffl_G2, aes(x=Treatment, y=Mean_ExpresionP2, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP2-sd_ExpresionP2, ymax=Mean_ExpresionP2+sd_ExpresionP2),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 2")
Pfaffl_Gen2
# Repetir analisis de Gen 1 y Gen 2, pero usando eficiencias de cebadores menos optimos
# usar los datos de la columna Eficiencia2
# Calcular porcentaje de eficiencia de los cebadores utilizados
# Eficiencia 2 gen de referencia: 3.05 (205%)
# Eficiencia 2 gen de interes: 1.70 (70%)
# Analisis Gen 1
# Promedio de los controles del gen de referencia
Prom_Ref_CPb<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Ref_CP2=mean(Gen_ref))
class(Prom_Ref_CPb)
Prom_Ref_CPb<-as.numeric(Prom_Ref_CPb)
# Promedio control del gen de interes
Prom_Int_CPb<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen1, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CPb=mean(Gen1))
class(Prom_Int_CPb)
Prom_Int_CPb<-as.numeric(Prom_Int_CPb)
# Calculo de expresion
Expresion_Pfaffl_G1b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen1, Eficiencia2)%>%
mutate(DeltaGR_CPb=Prom_Ref_CPb-Gen_ref, E_DeltaGR_CPb=Eficiencia2^(DeltaGR_CPb))%>%
mutate(DeltaGI_IPb=Prom_Int_CPb-Gen1, E_DeltaGI_CPb=Eficiencia2^(DeltaGI_IPb))%>%
mutate(ExpresionPb=E_DeltaGI_CPb/E_DeltaGR_CPb)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G1b <- Expresion_Pfaffl_G1b %>% select(Treatment, ExpresionPb) %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_ExpresionPb=mean(ExpresionPb),
sd_ExpresionPb=sd(ExpresionPb))
# Grafico de barras Fold-change
Pfaffl_Gen1b<- ggplot(Resumen_Pfaffl_G1b, aes(x=Treatment, y=Mean_ExpresionPb, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionPb-sd_ExpresionPb, ymax=Mean_ExpresionPb+sd_ExpresionPb),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 1b")
Pfaffl_Gen1b
# Analisis Gen 2
# Promedio control del gen de interes
Prom_Int_CP2b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen2, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CPb=mean(Gen2))
class(Prom_Int_CP2b)
Prom_Int_CP2b<-as.numeric(Prom_Int_CP2b)
# Calculo de expresion
Expresion_Pfaffl_G2b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen2, Eficiencia2)%>%
mutate(DeltaGR_CP2b=Prom_Ref_CP2-Gen_ref, E_DeltaGR_CP2b=Eficiencia2^(DeltaGR_CP2b))%>%
mutate(DeltaGI_IP2b=Prom_Int_CP2b-Gen2, E_DeltaGI_CP2b=Eficiencia2^(DeltaGI_IP2b))%>%
mutate(ExpresionP2b=E_DeltaGI_CP2b/E_DeltaGR_CP2b)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G2b<-Expresion_Pfaffl_G2b%>%
select(Treatment, ExpresionP2b)%>%
group_by(Treatment)%>%
summarize(n=n(),
Mean_ExpresionP2b=mean(ExpresionP2b),
sd_ExpresionP2b=sd(ExpresionP2b))
# Grafico de barras Fold-change
Pfaffl_Gen2b<-ggplot(Resumen_Pfaffl_G2b, aes(x=Treatment, y=Mean_ExpresionP2b, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP2b-sd_ExpresionP2b, ymax=Mean_ExpresionP2b+sd_ExpresionP2b),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 2")
Pfaffl_Gen2b
# Unificar graficos
#Utilizar el siguiente codigo para unificar las graficas de los genes 1, 2 y 3.
plot_grid(Pfaffl_Gen1, Pfaffl_Gen1b, Pfaffl_Gen2, Pfaffl_Gen2b, labels=c("A", "B", "C", "D"), ncol= 2, nrow = 2)
# Responder
# a) ¿Que diferencias visualiza en la expresión genica obtenida entre los metodos
# Delta-Delta CT y Pfaffl para los genes analizados?
# b) ¿Que diferencia observa en los genes 1 y 2 analizados con diferente eficencia de
# cebadores?
Prom_Int_C3<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen3, Eficiencia)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_C3=mean(Gen2))
class(Prom_Int_C3)
Prom_Int_C3<-as.numeric(Prom_Int_C3)
Prom_Int_C3<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen3, Eficiencia)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_C3=mean(Gen3))
class(Prom_Int_C3)
Prom_Int_C3<-as.numeric(Prom_Int_C3)
# Normalizar el CT del gen de interes al del gen de referencia para muestra control
GR_GI3<-(Prom_Int_C3-Prom_Ref_C)
GR_GI3
ExpresionG3<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen3, Eficiencia)%>%  #Selecciona Gen 1
filter(Treatment %in% c("Control","A","B","C"))%>% # Selecciona tratamientos, el control queda con valor 1
mutate(GR_GI_T3=Gen3-Gen_ref)%>% # GR_GI_T= Resta del Ct del gen de referncia al Ct del gen de interes por cada muestra
mutate(Trat_ctrl3=GR_GI_T3-GR_GI3)%>% # Resta de GR_GI de los controles al GR_GI_T de los tratamientos por cada muestra
mutate(Expresion3=2^-(Trat_ctrl3)) # 2^Delta-Delta CT= Relacion de expresion normalizada
# Promedios y desviaciones estandar por tratamiento
Resumen_G3 <- ExpresionG3 %>% select(Treatment, Expresion3) %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_Expresion3=mean(Expresion3),
sd_Expresion3=sd(Expresion3))
# Grafico de barras Fold-change
Gen3<-ggplot(Resumen_G3, aes(x=Treatment, y=Mean_Expresion3, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_Expresion3-sd_Expresion3, ymax=Mean_Expresion3+sd_Expresion3), width=.2,
position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (2^ddCt)",title="Gen 3")
# Unificar graficos
#Utilizar el sicguiente codigo para unificar las graficas de los genes 1, 2 y 3.
plot_grid(Gen1, Gen2, Gen3,labels=c("A", "B", "C"), nrow = 3)
Prom_Ref_CPb<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Ref_CP2=mean(Gen_ref))
class(Prom_Ref_CPb)
Prom_Ref_CPb<-as.numeric(Prom_Ref_CPb)
Prom_Int_CPb<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen1, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CPb=mean(Gen1))
class(Prom_Int_CPb)
Prom_Int_CPb<-as.numeric(Prom_Int_CPb)
Expresion_Pfaffl_G1b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen1, Eficiencia2)%>%
mutate(DeltaGR_CPb=Prom_Ref_CPb-Gen_ref, E_DeltaGR_CPb=Eficiencia2^(DeltaGR_CPb))%>%
mutate(DeltaGI_IPb=Prom_Int_CPb-Gen1, E_DeltaGI_CPb=Eficiencia2^(DeltaGI_IPb))%>%
mutate(ExpresionPb=E_DeltaGI_CPb/E_DeltaGR_CPb)
Resumen_Pfaffl_G1b <- Expresion_Pfaffl_G1b %>% select(Treatment, ExpresionPb) %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_ExpresionPb=mean(ExpresionPb),
sd_ExpresionPb=sd(ExpresionPb))
Pfaffl_Gen1b<- ggplot(Resumen_Pfaffl_G1b, aes(x=Treatment, y=Mean_ExpresionPb, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionPb-sd_ExpresionPb, ymax=Mean_ExpresionPb+sd_ExpresionPb),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 1b")
Pfaffl_Gen1b
rm(list = ls())
library(readxl)
library(ggplot2)
library(dplyr)
library(cowplot)
Ctdata <- read_excel("Datos.xlsx")
Ctdata
# Promedio de los controles del gen de referencia
Prom_Ref_CP<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Ref_CP=mean(Gen_ref))
class(Prom_Ref_CP)
Prom_Ref_CP<-as.numeric(Prom_Ref_CP)
# Promedio control del gen de interes
Prom_Int_CP<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen1, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CP=mean(Gen1))
class(Prom_Int_CP)
Prom_Int_CP<-as.numeric(Prom_Int_CP)
# Calculo de expresion
Expresion_Pfaffl_G1<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen1, Eficiencia2)%>%
mutate(DeltaGR_CP=Prom_Ref_CP-Gen_ref, E_DeltaGR_CP=Eficiencia2^(DeltaGR_CP))%>%
mutate(DeltaGI_IP=Prom_Int_CP-Gen1, E_DeltaGI_CP=Eficiencia2^(DeltaGI_IP))%>%
mutate(ExpresionP=E_DeltaGI_CP/E_DeltaGR_CP)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G1 <- Expresion_Pfaffl_G1 %>% select(Treatment, ExpresionP) %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_ExpresionP=mean(ExpresionP),
sd_ExpresionP=sd(ExpresionP))
# Grafico de barras Fold-change
Pfaffl_Gen1<- ggplot(Resumen_Pfaffl_G1, aes(x=Treatment, y=Mean_ExpresionP, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP-sd_ExpresionP, ymax=Mean_ExpresionP+sd_ExpresionP),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 1")
Pfaffl_Gen1
# Repetir para Gen2
# Promedio de los controles del gen de referencia
Prom_Ref_CP2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Ref_CP2=mean(Gen_ref))
class(Prom_Ref_CP2)
Prom_Ref_CP2<-as.numeric(Prom_Ref_CP2)
# Promedio control del gen de interes
Prom_Int_CP2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen2, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CP=mean(Gen2))
class(Prom_Int_CP2)
Prom_Int_CP2<-as.numeric(Prom_Int_CP2)
# Calculo de expresion
Expresion_Pfaffl_G2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen2, Eficiencia2)%>%
mutate(DeltaGR_CP2=Prom_Ref_CP2-Gen_ref, E_DeltaGR_CP2=Eficiencia2^(DeltaGR_CP2))%>%
mutate(DeltaGI_IP2=Prom_Int_CP2-Gen2, E_DeltaGI_CP2=Eficiencia2^(DeltaGI_IP2))%>%
mutate(ExpresionP2=E_DeltaGI_CP2/E_DeltaGR_CP2)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G2<-Expresion_Pfaffl_G2%>%
select(Treatment, ExpresionP2)%>%
group_by(Treatment)%>%
summarize(n=n(),
Mean_ExpresionP2=mean(ExpresionP2),
sd_ExpresionP2=sd(ExpresionP2))
# Grafico de barras Fold-change
Pfaffl_Gen2<-ggplot(Resumen_Pfaffl_G2, aes(x=Treatment, y=Mean_ExpresionP2, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP2-sd_ExpresionP2, ymax=Mean_ExpresionP2+sd_ExpresionP2),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 2")
Pfaffl_Gen2
Prom_Ref_CPb<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Ref_CP2=mean(Gen_ref))
class(Prom_Ref_CPb)
Prom_Ref_CPb<-as.numeric(Prom_Ref_CPb)
Prom_Int_CPb<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen1, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CPb=mean(Gen1))
class(Prom_Int_CPb)
Prom_Int_CPb<-as.numeric(Prom_Int_CPb)
Expresion_Pfaffl_G1b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen1, Eficiencia2)%>%
mutate(DeltaGR_CPb=Prom_Ref_CP-Gen_ref, E_DeltaGR_CPb=Eficiencia2^(DeltaGR_CPb))%>%
mutate(DeltaGI_IPb=Prom_Int_CPb-Gen1, E_DeltaGI_CPb=Eficiencia2^(DeltaGI_IPb))%>%
mutate(ExpresionPb=E_DeltaGI_CPb/E_DeltaGR_CPb)
Prom_Ref_CP<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Ref_CP=mean(Gen_ref))
class(Prom_Ref_CP)
Prom_Ref_CP<-as.numeric(Prom_Ref_CP)
# Promedio control del gen de interes
Prom_Int_CP<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen1, Eficiencia)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CP=mean(Gen1))
class(Prom_Int_CP)
Prom_Int_CP<-as.numeric(Prom_Int_CP)
# Calculo de expresion
Expresion_Pfaffl_G1<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen1, Eficiencia)%>%
mutate(DeltaGR_CP=Prom_Ref_CP-Gen_ref, E_DeltaGR_CP=Eficiencia2^(DeltaGR_CP))%>%
mutate(DeltaGI_IP=Prom_Int_CP-Gen1, E_DeltaGI_CP=Eficiencia2^(DeltaGI_IP))%>%
mutate(ExpresionP=E_DeltaGI_CP/E_DeltaGR_CP)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G1 <- Expresion_Pfaffl_G1 %>% select(Treatment, ExpresionP) %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_ExpresionP=mean(ExpresionP),
sd_ExpresionP=sd(ExpresionP))
# Grafico de barras Fold-change
Pfaffl_Gen1<- ggplot(Resumen_Pfaffl_G1, aes(x=Treatment, y=Mean_ExpresionP, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP-sd_ExpresionP, ymax=Mean_ExpresionP+sd_ExpresionP),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 1")
Pfaffl_Gen1
# Repetir para Gen2
# Promedio de los controles del gen de referencia
Prom_Ref_CP2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Ref_CP2=mean(Gen_ref))
class(Prom_Ref_CP2)
Prom_Ref_CP2<-as.numeric(Prom_Ref_CP2)
# Promedio control del gen de interes
Prom_Int_CP2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen2, Eficiencia)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CP=mean(Gen2))
class(Prom_Int_CP2)
Prom_Int_CP2<-as.numeric(Prom_Int_CP2)
# Calculo de expresion
Expresion_Pfaffl_G2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen2, Eficiencia)%>%
mutate(DeltaGR_CP2=Prom_Ref_CP2-Gen_ref, E_DeltaGR_CP2=Eficiencia^(DeltaGR_CP2))%>%
mutate(DeltaGI_IP2=Prom_Int_CP2-Gen2, E_DeltaGI_CP2=Eficiencia^(DeltaGI_IP2))%>%
mutate(ExpresionP2=E_DeltaGI_CP2/E_DeltaGR_CP2)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G2<-Expresion_Pfaffl_G2%>%
select(Treatment, ExpresionP2)%>%
group_by(Treatment)%>%
summarize(n=n(),
Mean_ExpresionP2=mean(ExpresionP2),
sd_ExpresionP2=sd(ExpresionP2))
# Grafico de barras Fold-change
Pfaffl_Gen2<-ggplot(Resumen_Pfaffl_G2, aes(x=Treatment, y=Mean_ExpresionP2, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP2-sd_ExpresionP2, ymax=Mean_ExpresionP2+sd_ExpresionP2),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 2")
Pfaffl_Gen2
# Promedio control del gen de interes
Prom_Int_CPb<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen1, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CPb=mean(Gen1))
class(Prom_Int_CPb)
Prom_Int_CPb<-as.numeric(Prom_Int_CPb)
# Calculo de expresion
Expresion_Pfaffl_G1b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen1, Eficiencia2)%>%
mutate(DeltaGR_CPb=Prom_Ref_CP-Gen_ref, E_DeltaGR_CPb=Eficiencia2^(DeltaGR_CPb))%>%
mutate(DeltaGI_IPb=Prom_Int_CPb-Gen1, E_DeltaGI_CPb=Eficiencia2^(DeltaGI_IPb))%>%
mutate(ExpresionPb=E_DeltaGI_CPb/E_DeltaGR_CPb)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G1b <- Expresion_Pfaffl_G1b %>% select(Treatment, ExpresionPb) %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_ExpresionPb=mean(ExpresionPb),
sd_ExpresionPb=sd(ExpresionPb))
# Grafico de barras Fold-change
Pfaffl_Gen1b<- ggplot(Resumen_Pfaffl_G1b, aes(x=Treatment, y=Mean_ExpresionPb, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionPb-sd_ExpresionPb, ymax=Mean_ExpresionPb+sd_ExpresionPb),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 1b")
Pfaffl_Gen1b
# Analisis Gen 2
# Promedio control del gen de interes
Prom_Int_CP2b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen2, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CPb=mean(Gen2))
class(Prom_Int_CP2b)
Prom_Int_CP2b<-as.numeric(Prom_Int_CP2b)
# Calculo de expresion
Expresion_Pfaffl_G2b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen2, Eficiencia2)%>%
mutate(DeltaGR_CP2b=Prom_Ref_CP2-Gen_ref, E_DeltaGR_CP2b=Eficiencia2^(DeltaGR_CP2b))%>%
mutate(DeltaGI_IP2b=Prom_Int_CP2b-Gen2, E_DeltaGI_CP2b=Eficiencia2^(DeltaGI_IP2b))%>%
mutate(ExpresionP2b=E_DeltaGI_CP2b/E_DeltaGR_CP2b)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G2b<-Expresion_Pfaffl_G2b%>%
select(Treatment, ExpresionP2b)%>%
group_by(Treatment)%>%
summarize(n=n(),
Mean_ExpresionP2b=mean(ExpresionP2b),
sd_ExpresionP2b=sd(ExpresionP2b))
# Grafico de barras Fold-change
Pfaffl_Gen2b<-ggplot(Resumen_Pfaffl_G2b, aes(x=Treatment, y=Mean_ExpresionP2b, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP2b-sd_ExpresionP2b, ymax=Mean_ExpresionP2b+sd_ExpresionP2b),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 2")
Pfaffl_Gen2b
# Unificar graficos
#Utilizar el siguiente codigo para unificar las graficas de los genes 1, 2 y 3.
plot_grid(Pfaffl_Gen1, Pfaffl_Gen1b, Pfaffl_Gen2, Pfaffl_Gen2b, labels=c("A", "B", "C", "D"), ncol= 2, nrow = 2)
Pfaffl_Gen2b<-ggplot(Resumen_Pfaffl_G2b, aes(x=Treatment, y=Mean_ExpresionP2b, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP2b-sd_ExpresionP2b, ymax=Mean_ExpresionP2b+sd_ExpresionP2b),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 2b")
Pfaffl_Gen2b
plot_grid(Pfaffl_Gen1, Pfaffl_Gen1b, Pfaffl_Gen2, Pfaffl_Gen2b, labels=c("A", "B", "C", "D"), ncol= 2, nrow = 2)
Prom_Int_CP<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen1, Eficiencia)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CP=mean(Gen1))
class(Prom_Int_CP)
Prom_Int_CP<-as.numeric(Prom_Int_CP)
# Calculo de expresion
Expresion_Pfaffl_G1<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen1, Eficiencia)%>%
mutate(DeltaGR_CP=Prom_Ref_CP-Gen_ref, E_DeltaGR_CP=Eficiencia^(DeltaGR_CP))%>%
mutate(DeltaGI_IP=Prom_Int_CP-Gen1, E_DeltaGI_CP=Eficiencia^(DeltaGI_IP))%>%
mutate(ExpresionP=E_DeltaGI_CP/E_DeltaGR_CP)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G1 <- Expresion_Pfaffl_G1 %>% select(Treatment, ExpresionP) %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_ExpresionP=mean(ExpresionP),
sd_ExpresionP=sd(ExpresionP))
# Grafico de barras Fold-change
Pfaffl_Gen1<- ggplot(Resumen_Pfaffl_G1, aes(x=Treatment, y=Mean_ExpresionP, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP-sd_ExpresionP, ymax=Mean_ExpresionP+sd_ExpresionP),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 1")
Pfaffl_Gen1
Prom_Ref_CP2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Ref_CP2=mean(Gen_ref))
class(Prom_Ref_CP2)
Prom_Ref_CP2<-as.numeric(Prom_Ref_CP2)
# Promedio control del gen de interes
Prom_Int_CP2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen2, Eficiencia)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CP=mean(Gen2))
class(Prom_Int_CP2)
Prom_Int_CP2<-as.numeric(Prom_Int_CP2)
# Calculo de expresion
Expresion_Pfaffl_G2<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen2, Eficiencia)%>%
mutate(DeltaGR_CP2=Prom_Ref_CP2-Gen_ref, E_DeltaGR_CP2=Eficiencia^(DeltaGR_CP2))%>%
mutate(DeltaGI_IP2=Prom_Int_CP2-Gen2, E_DeltaGI_CP2=Eficiencia^(DeltaGI_IP2))%>%
mutate(ExpresionP2=E_DeltaGI_CP2/E_DeltaGR_CP2)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G2<-Expresion_Pfaffl_G2%>%
select(Treatment, ExpresionP2)%>%
group_by(Treatment)%>%
summarize(n=n(),
Mean_ExpresionP2=mean(ExpresionP2),
sd_ExpresionP2=sd(ExpresionP2))
# Grafico de barras Fold-change
Pfaffl_Gen2<-ggplot(Resumen_Pfaffl_G2, aes(x=Treatment, y=Mean_ExpresionP2, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP2-sd_ExpresionP2, ymax=Mean_ExpresionP2+sd_ExpresionP2),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 2")
Pfaffl_Gen2
# Repetir analisis de Gen 1 y Gen 2, pero usando eficiencias de cebadores menos optimos
# usar los datos de la columna Eficiencia2
# Calcular porcentaje de eficiencia de los cebadores utilizados
# Eficiencia 2 gen de referencia: 3.05 (205%)
# Eficiencia 2 gen de interes: 1.70 (70%)
# Analisis Gen 1
# Promedio control del gen de interes
Prom_Int_CPb<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen1, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CPb=mean(Gen1))
class(Prom_Int_CPb)
Prom_Int_CPb<-as.numeric(Prom_Int_CPb)
# Calculo de expresion
Expresion_Pfaffl_G1b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen1, Eficiencia2)%>%
mutate(DeltaGR_CPb=Prom_Ref_CP-Gen_ref, E_DeltaGR_CPb=Eficiencia2^(DeltaGR_CPb))%>%
mutate(DeltaGI_IPb=Prom_Int_CPb-Gen1, E_DeltaGI_CPb=Eficiencia2^(DeltaGI_IPb))%>%
mutate(ExpresionPb=E_DeltaGI_CPb/E_DeltaGR_CPb)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G1b <- Expresion_Pfaffl_G1b %>% select(Treatment, ExpresionPb) %>% group_by(Treatment) %>%
summarize(n=n(),
Mean_ExpresionPb=mean(ExpresionPb),
sd_ExpresionPb=sd(ExpresionPb))
# Grafico de barras Fold-change
Pfaffl_Gen1b<- ggplot(Resumen_Pfaffl_G1b, aes(x=Treatment, y=Mean_ExpresionPb, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionPb-sd_ExpresionPb, ymax=Mean_ExpresionPb+sd_ExpresionPb),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 1b")
Pfaffl_Gen1b
# Analisis Gen 2
# Promedio control del gen de interes
Prom_Int_CP2b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen2, Eficiencia2)%>%
filter(Treatment=="Control", Tissue=="Cerebro")%>%
summarize(Prom_Int_CPb=mean(Gen2))
class(Prom_Int_CP2b)
Prom_Int_CP2b<-as.numeric(Prom_Int_CP2b)
# Calculo de expresion
Expresion_Pfaffl_G2b<-Ctdata%>%
select(Replica,Treatment,Tissue,Gen_ref, Gen2, Eficiencia2)%>%
mutate(DeltaGR_CP2b=Prom_Ref_CP2-Gen_ref, E_DeltaGR_CP2b=Eficiencia2^(DeltaGR_CP2b))%>%
mutate(DeltaGI_IP2b=Prom_Int_CP2b-Gen2, E_DeltaGI_CP2b=Eficiencia2^(DeltaGI_IP2b))%>%
mutate(ExpresionP2b=E_DeltaGI_CP2b/E_DeltaGR_CP2b)
# Promedios y desviaciones estandar por tratamiento
Resumen_Pfaffl_G2b<-Expresion_Pfaffl_G2b%>%
select(Treatment, ExpresionP2b)%>%
group_by(Treatment)%>%
summarize(n=n(),
Mean_ExpresionP2b=mean(ExpresionP2b),
sd_ExpresionP2b=sd(ExpresionP2b))
# Grafico de barras Fold-change
Pfaffl_Gen2b<-ggplot(Resumen_Pfaffl_G2b, aes(x=Treatment, y=Mean_ExpresionP2b, fill=Treatment)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=Mean_ExpresionP2b-sd_ExpresionP2b, ymax=Mean_ExpresionP2b+sd_ExpresionP2b),
width=.2, position=position_dodge(.9))+
theme(legend.position="none")+
labs(y="Fold Change (Pfaffl method)",title="Gen 2b")
Pfaffl_Gen2b
# Unificar graficos
#Utilizar el siguiente codigo para unificar las graficas de los genes 1, 2 y 3.
plot_grid(Pfaffl_Gen1, Pfaffl_Gen1b, Pfaffl_Gen2, Pfaffl_Gen2b, labels=c("A", "B", "C", "D"), ncol= 2, nrow = 2)
